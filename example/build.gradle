plugins {
    id 'jacoco'
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'de.jansauer.printcoverage'

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compileOnly project(':annotation')
    kapt project(':codegen')

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_version

    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    testImplementation group: 'io.strikt', name: 'strikt-core', version: strikt_version
    testImplementation group: 'io.strikt', name: 'strikt-java-time', version: strikt_version


}

jacoco {
    toolVersion = "0.8.3"
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }

    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }

    testLogging {
        exceptionFormat "full"
        events "passed", "skipped", "failed"

    }
}

jacocoTestReport {
    // Adjust the output of the test report
    reports {
        xml.enabled true
        csv.enabled false
    }
}

jacocoTestReport.finalizedBy(printCoverage)

test.finalizedBy(jacocoTestReport)

//val args = variant.javaCompileOptions.annotationProcessorOptions.arguments


afterEvaluate { Project evaluatedProject ->
    File file = evaluatedProject.tasks.findByName("kaptKotlin").kotlinSourcesDestinationDir
    File generatedAssertionsDir = file.toPath().parent.resolve("strikt").toFile()
    sourceSets.test.kotlin.srcDirs += generatedAssertionsDir
}


//def generatedAssertionsDir = "$buildDir/generated-resources/strikt"
//
//sourceSets {
//    test {
//        output.dir(generatedResources, builtBy: 'generateMyResources')
//        it is now a part of the 'main' classpath and will be a part of the jar
//    }
//}
