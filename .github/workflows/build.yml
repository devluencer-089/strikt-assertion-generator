name: CI

on:
  push:
    # change to *
    branches: [ master ]
  pull_request: [ master ]

env:
  GRADLE_HOME: ${{ github.workspace }}/gradle-home

jobs:
  assemble:
    name: Assemble
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      # These setup steps should be common across all jobs in this workflow.
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      ## Caching
      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ${{ env.GRADLE_HOME }}/caches
          # Include the SHA in the hash so this step always adds a cache entry. If we didn't use the SHA, the artifacts
          # would only get cached once for each build config hash.
          key: gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-${{ github.sha }}
          # The first time a SHA is assembled, we still want to load dependencies from the cache.
          # Note that none of jobs dependent on this one need restore keys, since they'll always have an exact hit.
          restore-keys: |
            gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}

      # We want to keep the dependencies from the cache, but clear out the build cache which contains the actual
      # compiled artifacts from this project. This ensures we don't run into any issues with stale cache entries,
      # and that the resulting cache we upload for the other jobs won't waste any space on stale binaries.
      # A simpler approach would be simply to delete the build-cache before uploading the cache archive, however
      # if we did that in this job it would defeat the purpose of sharing that directory with dependent jobs,
      # and there's no way to modify the cache after the job that created it finishes.
      - name: Clean gradle build cache to assemble fresh
        run: |
          ls -lhrt $GRADLE_HOME/caches || true
          rm -rf $GRADLE_HOME/caches/build-cache-1
          ls -lhrt $GRADLE_HOME/caches || true

      ## Actual task
      - name: Assemble with gradle
        run: ./gradlew assemble --build-cache --no-daemon --stacktrace --gradle-user-home "$GRADLE_HOME"

      # This should ideally be done in the Check job below, but until gradle caching is fixed we
      # need to do it after assembling. See https://github.com/square/workflow/issues/1152.
#      - name: Run dokka to validate kdoc
#        run: ./gradlew dokka siteDokka --build-cache --no-daemon --stacktrace --gradle-user-home "$GRADLE_HOME"

  # Runs all check tasks
  check:
    name: Check
    needs: assemble
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      ## Caching
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ${{ env.GRADLE_HOME }}/caches
          # Don't set restore-keys so cache is always only valid for the current build config.
          # Also don't use ${{ runner.os }} in the key so we don't re-assemble for UI tests.
          key: gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/buildSrc/**') }}-${{ github.sha }}

      ## Actual task
      - name: Check with Gradle
        run: ./gradlew check --build-cache --no-daemon --stacktrace --gradle-user-home "$GRADLE_HOME"
